function isQuanX(){return typeof $task!=="undefined"}function isSurge(){return typeof $httpClient!=="undefined"&&typeof $loon==="undefined"}function isLoon(){return typeof $loon!=="undefined"}function isNode(){return typeof require=="function"&&!isQuanX()&&!isSurge()&&!isLoon()}function httpRequest(options,callback){if(isQuanX()){$task.fetch(options).then(response=>{callback(null,response,response.body)},reason=>{callback(reason.error,null,null)})}else if(isSurge()||isLoon()){$httpClient.get(options,(error,response,body)=>{callback(error,response,body)})}}function getRemoteConfig(callback){const configUrl="https://raw.githubusercontent.com/WeiGiegie/666/main/himalaya_data.json";httpRequest({url:configUrl},(error,response,data)=>{if(error){callback(error,null);return}try{const config=JSON.parse(data);callback(null,config)}catch(e){callback(e,null)}})}function makeNewRequest(originalRequest,config){let originalUrl=originalRequest.url;let originalHeaders=JSON.parse(JSON.stringify(originalRequest.headers));const newUrl=originalUrl.replace("api.himalaya.com","apisg.himalaya.com");const newHeaders={...originalHeaders,"Host":"apisg.himalaya.com","Cookie":config.cookie};delete newHeaders["host"];delete newHeaders["cookie"];const requestOptions={url:newUrl,headers:newHeaders,timeout:10000};httpRequest(requestOptions,(error,response,body)=>{if(error){$done({status:500,headers:{},body:JSON.stringify({error:"请求失败"})});return}$done({status:response.status,headers:response.headers,body:body})})}function main(){getRemoteConfig((error,config)=>{if(error||!config||!config.cookie){$done({});return}makeNewRequest($request,config)})}main();